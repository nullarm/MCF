#**********************************************************************
#	Sample physics configuration file for
#       MCF: Multiscale(micro-meso-macroscopic) Complex Fluids simulation.
#
#	Edit the settings below before start simulation.
#
#	Author : Xin Bian
#	Date   : 22.03.2009
#**********************************************************************
#       Dr. Marco Ellero's Emmy Noether Group	
#	at Prof.Dr. Nikolaus Adams' Chair of Aerodynamics, 
#	Faculty of Mechanical Engineering,
#	Technische Universitaet Muenchen, Germany.
#**********************************************************************



#**********************************************************************
#
#	physical/numerical parameters starts
#
#**********************************************************************


#----------------------------------------------------------------------
#	num_species  : number of species
#                      if set to 1, colloids will be ignored,
#                      there is only fluid.
#                      if set to 2, colloids must be given later. 
#                      Remark :		       
#                      wall boundary are not considered as one different
#		       species.
#      chi           : relative coarse-graining level in length of
#                      one direciton.
#                      So for mass/volume, chi^D, D=1, 2, or 3.
#                      
#      multiscale_shape: size distribution shape
#----------------------------------------------------------------------
	
num_species = 1

chi_level = 4

chi1 = 1.0

chi2 = 2.0
		
multiscale_shape = 2
#----------------------------------------------------------------------
#	< Spatial Definition >
#
#	num_dim   : space dimensions. Either 2 or 3.
#
#       computational domain :
#       min_phys  : down boundary coordinates min_x,min_y(, min_z).
#       max_phys  : up boundary coordinates max_x,max_y(, max_z).
#	 	    
#       lattice   : 2D :
#                       1 square; 2 staggered; 3 hexagonal.
#                   3D : 
#                       1 simple cubic lattice;
#                       2 body centered lattice;
#                       3 face centered lattice.	
#	num_part  : initial estimated number of particles 
#                   in x, y(, z) directions.
#       cut_off   : cut_off of compact support domain.
#----------------------------------------------------------------------
	
num_dim   = 2
min_phys  = 0.0, 0.0
max_phys  = 2.0, 4.0
lattice   = 1
num_part  = 80, 160
cut_off   = 0.075


#----------------------------------------------------------------------
#	< Temporal Scale >
#
#	dt       : time step.
#                  If negative value is given,
#                  dt(in explicit scheme) will be calculated in MCF 
#                  according to
#                  1 CFL,
#                  2 viscous diffusion, and
#                  3 magnitude of particle accerleartion.
#                  (Morris et al. J.Comput.Phys.1997)
#
#     step_start : number of time step to start with.
#	
#     step_end   : number of time step to end.
#                   
#                
#     time_start   : time to start with.
#
#     time_end     : time to end.
#     
#
#     Note that either step pair or time pair needed to be given,
#     the other pair must be set to be negative.
#----------------------------------------------------------------------

dt           = -1.0
step_start   =  0
step_end     =  50000
time_start   = -1.0
time_end     = -1.0

#----------------------------------------------------------------------
#  < Input parameters for fluid properties >
#
#     rho    	: density of solvent(initial input)
#     eta	: absolute/dynamic(shear) viscosity
#     eta_coef  : calibrating parameter used in 
#                 Hu&Adams Phys. Fluid. 2006 formulation(ksai).
#     ksai      : bulk viscosity
#     kt        : Boltzmann Constant * Temperature for SDPD.
#     c         : sound speed.
#     rho_ref   : reference density; 
#                  if dynamic_density_reference is required
#                  rho_min will be always calculated and
# 		   taken as reference density.
#			  
#            gamma      : exponenet in equation of state 
#            
#----------------------------------------------------------------------

rho      = 1.0
eta      = 8.46
eta_coef = 5.0
ksai     = 0.0
kt       = 0.0
c        = 400.0
rho_ref  = 0.0
gamma    = 1.0


#----------------------------------------------------------------------
#       < Relax run / pre-run physics parameters for fluid >
#       
#     Note that relax run is taking vantage of SDPD's feature
#     by swithing a pseudo-temperature(kt_relax) on.
#     The difference from real simulation is that dt_relax and
#     c_relax may be different values.
#
#     relax_type     : 1 according to given step/time.
#                      2 according to desired disorder level.
#     dt_relax       : time step.
#     step_relax     : steps to end.
#     time_relax     : time to end.
#     disorder_level : desired disorder level
#     kt_relax       : Boltzmann Constant * Temperature.
#     c_relax        : sound speed.
#
#----------------------------------------------------------------------

relax_type     = 2
dt_relax       = -1.0
step_relax     = -1
time_relax     = -1.0
disorder_level = 0.1
kt_relax       = 5.0e-10
c_relax        = 1.0


#----------------------------------------------------------------------
#   < Non-Newtonian viscoelastic (Oldroyd-B) parameters >
#
#   tau            : relaxation time of polymer molecules.
#   n_p            : number of dumbbells per unit volume.
#   kt_p           : Boltzmann Constant * Temperature for dumbell.
#   eigen_dynamics : logical value indicating if we are
#                    using eigen-dynamics way.
#   eval           : initial eigenvalues for eigen-dynamics.
#   eval_tolerance : if different eigenvalues are different
#                    more than this tolerance, they are treated
#                    as different eigenvalues, otherwise, they
#                    are considered the same.
#   evec           : initial eigenvectors for eigen-dynamics.
#                    1 egenvector matrix notation, 2D(3D):
#                      ev1_x   ev2_x  (ev3_x)
#                      ev1_y   ev2_y  (ev3_y)
#                     (ev1_z) (ev2_z) (ev3_z) 
#                    2 array notation in order(Fortran90) :
#                      ev1_x, ev1_y, (ev1_z), 
#                      ev2_x, ev2_y, (ev2_z),
#                     (ev3_x, ev3_y, ev3_z).
#                     should be provided here in array notation.
#  evec_normalize  : if eigenvector needed to be normalized
#  evec_tolerance  : if the length of eigenvector exceeds the
#                    unity more than tolerance, it will be normalized.
#----------------------------------------------------------------------

tau            = 0.02
n_p            = 10.0
kt_p           = 0.1
eigen_dynamics = FALSE
eval           = 1.0,1.0
eval_tolerance = 1.0E-4
evec           = 0.0, 0.0, 0.0, 0.0
evec_normalize = TRUE
evec_tolerance = 0.01

#----------------------------------------------------------------------
#	< External body force >
#	
#    body_force_type : type of body force
#                      0 : no body force
#                      1 : one direction constant
#                      2 : two direction constant(shear force)
#                      3 : F0*sin(ky)
#    body_force      : starting body force per unit mass
#                      applied to all solvent particles
#    body_force_d    : increment of bodyforce, when fixed flow velocity
#                      strategy is used.
#----------------------------------------------------------------------
	
body_force_type = 2
body_force      = 750.0, 0.0
body_force_d    = 0.0, 0.0

#----------------------------------------------------------------------
#    < Flow velocity <v> >
#
#    flow_direcion    : direction of desird flow.
#    flow_width       : the box width to calculate the flow velocity.
#    flow_v           : the imposed flow velocity at far field,
#                       when flow_velocity_fixed is TRUE.
#    flow_adjust_freq : the frequency to adjust body_force to get 
#                       expected flow velocity.
#----------------------------------------------------------------------

flow_direction   = 1
flow_width       = 0.1
flow_v           = 1.2e-4
flow_adjust_freq = 10

  
#----------------------------------------------------------------------
#          <Colloids' parameters>
#
#   Note : The order of parameters are fixed here, 
#   which should better be followed.
#
#  Common characteristics:
#
#  num_colloid        : number of colloids.
#
#  coll_adapt_t_coef  : if a overall adapt time step(SPH time step) is chosen,
#                       a cofficient is need: coef*sqrt(h/f_max);
#
#  coll_sub_time_step : a sub-time step of colloid(integer number)
#                       1: dt_1=dt_0, one step, i.e., 
#                          same time step as solvent particles.
#                       2: dt_1=dt_0/2.0, two steps inbetween, i.e.,
#                          half time step as solvent particles.
#                       and so on...
#  coll_implicit_pair_num_sweep  : number of sweeps
#                       in case of splitting implicit scheme 
#                       for pairwise colloids.
#
#  coll_implicit_pair_sweep_adaptive : indicate if number of sweeps for
#                       pairwise splitting implicit scheme is adaptive
#   
#  coll_implicit_pair_sweep_tolerance : when sweeping is adaptive,
#                       define the error tolerance.
#                    
#  coll_implicit_pair_sweep_max : maximum number of sweeps
#                       in case of splitting implicit scheme 
#                       for pairwise colloids.
#
#  coll_explicit_sub_time_step  : number of sub time step
#                       in case of splitting implicit scheme 
#                       for repulsive force.
#
#  coll_rho         : density of colloids.
#  coll_rho_type    : density type
#                    0 constant 
#                    1 calculated;
#  coll_translate   : if colldoids translate.
#  coll_rotate      : if colldoids rotate.
#  coll_place       : type of placement of boundary particles
#                    1 (2D/3D) on lattice, same way as solvent;
#                      A boundary particle has the same mass 
#                      as a solvent particle.
#                    2 (2D disk) parallel to the surface:
#                      A boundary particle has the same mass 
#                      as a solvent particle;
#                      fixed distance dx(2) on each layer;
#		       each layer distance is dx(1). 
#                    3 (2D disk) parallel to the surface:
#                      A boundary particle has the same mass 
#                      as a solvent particle;	 
#                      fixed number of particles on each layer
#		       as the outest layer;
#		       each layer distance is dx(1).
#                    4 (2D disk) parallel to the surface:
#                      A boundary particle has the same mass 
#                      as a solvent particle;
#		       total mass of each layer has the same mass
#                      as the shell(thickness dx(1) of the disk;
#		       each layer distance is dx(1). 
#                    5 (2D disk) parallel to the surface:
#                      A boundary particle has the same mass 
#                      as a solvent particle;
#		       total mass of each layer has the same mass
#                      as the shell(thickness dx(1) of the disk;
#		       each layer distance is dx(1), 
#                      also the particle located in always dx(1)/2.
#                      The it can be considered 2+4 model together.
#		       
#  coll_noslip      : type of no slip boundary 
#                    1 frozen 
#                    2 Morris J. et al. 1997 
#                    3 Zhu et al. 1999.
#  coll_body_force_type:
#                     see body force type above.
#
#  coll_body_force  : body force per unit mass on colloid.
#
#
#  cc_lub_cut_off   : cut off of surface distance for lubrication
#                     interaction between colloid and colloid.
#
#  cc_lub_cut_on    : cut on of surface distance for lubrication
#                     interaction between colloid and colloid.
#                     i.e., maximum threshold for lubrication force
#                     is restricted at this miminum possible gap.
#
#  cc_repul_sigma   : sigma in Lennard-Jones potentional force
#
#  cc_repul_cut_off : cut off for extra repulsive force which
#                     keeps colloids apart.
#
#  cc_repul_cut_on  : cut on of surface distance for repulsion
#                     interaction between colloid and colloid.
#                     i.e., maximum threshold for repulsion force
#                     is restricted at this miminum possible gap.
#
#  cc_magnet_cut_off : cut off for magnetic force 
#
#  cc_magnet_cut_on  : cut on of magnetic force

#  cc_magnet_F0      : magnitude of the magnetic force.
#
#  cc_magnet_B      : magnetic field(vector)
#
#  cc_magnet_mom    : magnetic moment(unit vector)
#
#  cc_magnet_rot_vector I: 
#                   magnetic field is rotating around I.
#                   I1, I2, I3 (always 3D vector), phi (4th dimension)
#                   I is recommended to be unit, otherwise will be normalized.
#                   theta is the angle rotated around I before simulation,
#                   i.e., initial orientation of magentic field.
#
#  cc_magnet_rot_freq: 
#                   rotating frequency of magnetic field.
#
#  cc_magnet_f      : particle area/volume fraction that is paramagnetic
#
#  cc_magnet_chi    : magnetic susceptibility difference between particle and fluid.
#
#  cc_magnet_mu     : magnetic permittivity
#
#
#  cw_lub_cut_off   : cut off of surface distance for lubrication
#                     interaction between colloid and wall.
#
#  cw_lub_cut_on    : cut on of surface distance for lubrication
#                     interaction between colloid and wall.
#                     i.e., maximum threshold for lubrication force
#                     is restricted at this miminum possible gap.
#
#  cw_repul_cut_off : cut off for extra repulsive force which
#                     keeps colloid and wall apart.
#
#  cw_repul_cut_on  : cut on of surface distance for repulsion
#                     interaction between colloid and colloid.
#                     i.e., maximum threshold for repulsion force
#                     is restricted at this miminum possible gap.
#
#  cw_repul_F0     : constant, related to maximum repulsive force.
#
#
#
#  Individual characteristics
#
#  coll_shape     : 1 
#                     2D: cylinder; 
#                     3D: cylinder, 
#                         by default axis is along z direction periodically.
#                   2
#                     2D: disk (the same as 2D cylinder)
#                     3D: sphere 
#  		    3
#                     2D: ellipse
#                     3D: ellipsoid (spheroid: prolate and oblate)
#		    4 
#                     2D: dicolloid, 
#                         consist of two overlapping disks with same size.
#                     3D: dicolloid, 
#                         consist of two overlapping spheres with same size.
#                   5
#                     2D: star a+b*cos(c*theta)(2D)/rotate 2D with x-axis
#
#  coll_radius    : initial shape parameters of the colloid,
#                   it means differently for different shape.
#                   1 
#                      1st is radius.
#                      2nd is its length in 3D.
#                   2 
#                      1st is radius. 
#                   3
#                      1st is radius in major direction, semi-major axis; 
#                      3rd is radius in minor direction, semi-minor axis;
#                      2nd is either equal to 1st or 2nd.
#	            4  
#                      1st is radius in major direction, semi-major axis;
#                      2nd is radius in minor direction, semi-minor axis.
#                   5
#                      1st is average radius; 
#                      2nd is magnitude of shape fluctuation.
#                      
#  coll_freq      : useful for start shape 5, determin the roughness of star or
#                   frequency of shape fluctuation (integer number).
#
#  coll_m         : mass of a colloid, 
#                   calculated according to its volume and density.
#
#  coll_mmi       : mass momentum inertia of a colloid, 
#                   calculated according to its distribution of mass.
#
#  coll_x         : initial position of its center.
#
#  coll_v         : initial translating velocity of its center.
#
#  ************************(obsolete)
#  coll_rotation_matrix : initial rotation matrix 
#                    which indicate its orientation.
#                    A11,A21(,A31); A12,A22(,A32); A13,A23(,A33).
#  It is not input anymore, since it is difficult to keep each element
#  of matrix consistent, down to machine precision.
#  Instead we need a rotation vector, which can be converted to rotation matrix.
#  ************************
#
#  coll_rotation_vector I: 
#                 : I1, I2, I3 (always 3D vector), phi (4th dimension)
#                   I is recommended to be unit, otherwise will be normalized.
#                   theta is the angle rotated around I before simulation,
#                   i.e., initial orientation.
#
#  ************************(obsolete)
#  coll_theta     : rotated angle(usefull for 2D object only), 
#                   always 3D vector
#
#  Note : for 2D object, 
#  	  theta should be given, it not given, it is assumed zero.
#         
#         for 3D object,
#         theta is useless, therefore, rotation matrix should be given,
#         if not given, its principla axes are along with OXYZ.
#  ************************
#
#  coll_omega     : initial rotating velocity, always 3D vector.
#----------------------------------------------------------------------

num_colloid          = 0
coll_adapt_t_coef    = 1.0
coll_sub_time_step   = 1
coll_implicit_pair_num_sweep       = 1
coll_implicit_pair_sweep_adaptive  = F
coll_implicit_pair_sweep_tolerance = 1.0e-3
coll_implicit_pair_sweep_max       = 1024
coll_explicit_sub_time_step  = 1
coll_rho             = 1.0e3
coll_rho_type        = 0
coll_translate       = F
coll_rotate          = F
coll_place           = 1
coll_noslip          = 2
coll_body_force_type = 1
coll_body_force      = 0.0,0.0


cc_lub_cut_off   = 0.0
cc_lub_cut_on    = 0.0

cc_repul_sigma   = 0.1
cc_repul_cut_off = 0.0
cc_repul_cut_on  = 0.0
cc_repul_F0      = 0.0

cc_magnet_cut_off = 0.0
cc_magnet_cut_on  = 0.0
cc_magnet_F0      = 1.0		 
cc_magnet_mom      = -1.0, 0.0, 1.0
cc_magnet_rot_vector = 0.0,1.0,0.0, 0.0
cc_magnet_rot_f      = 100.0

cw_lub_cut_off   = 0.0
cw_lub_cut_on    = 0.0

cw_repul_cut_off = 0.0
cw_repul_cut_on  = 0.0
cw_repul_F0      = 0.0



coll_shape       = 1
coll_radius      = 0.02,0.0
coll_freq        = 0
coll_m           = 0.0
coll_mmi         = 0.0
coll_x           = 0.05,0.05
coll_v           = 0.0,0.0
coll_rot_vector  = 1.0,0.0,0.0,1.57
oll_theta        = 0.0,0.0,0.0
coll_omega       = 0.0,0.0,0.0


#----------------------------------------------------------------------
#       < Boundary condition of physical domain >
#
#       bcdef  : boudary condition definition
#                2D : x1,x2;y1,y2.
#                3D : x1,x2;y1,y2;z1,z2.
#               1 : periodic boundary condition;
#		3 : symmetry boundary condition:
#                   Particles interaction or subdomains communication
#                   must be non-symmetic;
#	        7 : wall boundary, outside computational domain,
#		    handeled by PPM using symmetry/mirror boundaries.
#                   Particles interaction or subdomains communication
#                   must be non-symmetic;
#               9 : solid wall boundary, outside of initial computational 
#  	            domain created by MCF extending computational domains.
#               10: Leeds-Edwards boundary
#
#       shear_type : 1 : normal 
#                    2 : oscillating with cosine function
#
#       shear_v :  Initial magnitude of shear velocity for different sides 
#                2D : shear velocity in y direction of x_min, x_max;
#                     shear velocity in x direction of y_min, y_max;
#                3D : shear velocity in y,z direction of x_min, x_max;
#                     shear velocity in x,z direction of y_min, y_max;
#                     shear velocity in x,y direction of z_min, z_max
#
#	shear_freq : frequecy of oscillating shear of different sides.
#
#       wall_rho_type : density type 
#                       0 constant.
#                       1 calculated.
#       wall_noslip : 
#                1 : frozen 2 : Morris J. et al. 1997 
#               
#----------------------------------------------------------------------

bcdef         = 1,1,1,1
shear_type    = 1,1,1,1
shear_v       = 0.0, 0.0, 0.0, 0.0
shear_freq    = 0.0,0.0,0.0,0.0
wall_rho_type = 0
wall_noslip   = 2

#**********************************************************************
#	mcf_physics file ends here
#**********************************************************************
